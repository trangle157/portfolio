// To parse this data:
//
//   import { Convert, AtlasTokens } from "./file";
//
//   const atlasTokens = Convert.toAtlasTokens(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

export interface AtlasTokens {
    animation:    Animation;
    border:       Border;
    breakpoints:  Breakpoints;
    colors:       Colors;
    direction:    Direction;
    display:      Display;
    focus:        Focus;
    "font-stack": FontStack;
    layout:       Layout;
    palette:      Palette;
    position:     Position;
    schemes:      Schemes;
    shadow:       Shadow;
    spacing:      Spacing;
    themes:       Themes;
    typography:   Typography;
    "z-index":    ZIndex;
}

export interface Animation {
    name:     string;
    location: string;
    tokens:   AnimationTokens;
}

export interface AnimationTokens {
    "$input-timing-function":       string;
    "$input-transition-duration":   string;
    "$nav-bar-transition-duration": string;
}

export interface Border {
    name:     string;
    location: string;
    tokens:   BorderTokens;
}

export interface BorderTokens {
    "$border-width":          string;
    "$border-width-md":       string;
    "$border-width-lg":       string;
    "$border-radius-sm":      string;
    "$border-radius":         string;
    "$border-radius-lg":      string;
    "$border-radius-rounded": string;
}

export interface Breakpoints {
    name:     string;
    location: string;
    tokens:   BreakpointsTokens;
}

export interface BreakpointsTokens {
    "$container-gap":         string;
    "$breakpoint-tablet":     string;
    "$breakpoint-desktop":    string;
    "$breakpoint-widescreen": string;
}

export interface Colors {
    name:     string;
    location: string;
    tokens:   ColorsTokens;
}

export interface ColorsTokens {
    "$white-static":                              string;
    "$black-static":                              string;
    $text:                                        string;
    "$text-subtle":                               string;
    "$text-invert":                               string;
    $hyperlink:                                   string;
    "$text-glow-high-contrast":                   string;
    "$box-shadow-color-light":                    string;
    "$box-shadow-color-medium":                   string;
    "$box-shadow-color-heavy":                    string;
    "$box-shadow-color-extra-heavy":              string;
    "$body-background":                           string;
    "$body-background-medium":                    string;
    "$alternate-background":                      string;
    "$alternate-background-medium":               string;
    $overlay:                                     string;
    "$overlay-invert":                            string;
    "$overlay-static":                            string;
    $border:                                      string;
    "$code-header":                               string;
    "$code-block":                                string;
    "$inline-code":                               string;
    "$control-border":                            string;
    "$table-header":                              string;
    "$table-row":                                 string;
    "$table-row-header":                          string;
    "$table-border-dark":                         string;
    "$facepile-red":                              string;
    "$facepile-teal":                             string;
    "$facepile-blue":                             string;
    "$default-hover":                             string;
    "$default-hover-invert":                      string;
    "$border-white-high-contrast":                string;
    "$border-yellow-high-contrast":               string;
    "$code-highlight-background":                 string;
    $visited:                                     string;
    "$score-low-off":                             string;
    "$score-low":                                 string;
    "$score-medium-off":                          string;
    "$score-medium":                              string;
    "$score-high-off":                            string;
    "$score-high":                                string;
    $primary:                                     string;
    "$primary-background":                        string;
    "$primary-background-glow-high-contrast":     string;
    "$primary-dark":                              string;
    "$primary-hover":                             string;
    "$primary-active":                            string;
    "$primary-invert":                            string;
    "$primary-box-shadow":                        string;
    $secondary:                                   string;
    "$secondary-background":                      string;
    "$secondary-background-glow-high-contrast":   string;
    "$secondary-dark":                            string;
    "$secondary-hover":                           string;
    "$secondary-active":                          string;
    "$secondary-invert":                          string;
    "$secondary-box-shadow":                      string;
    $tertiary:                                    string;
    "$tertiary-background":                       string;
    "$tertiary-background-glow-high-contrast":    string;
    "$tertiary-dark":                             string;
    "$tertiary-hover":                            string;
    "$tertiary-active":                           string;
    "$tertiary-invert":                           string;
    "$tertiary-box-shadow":                       string;
    $success:                                     string;
    "$success-background":                        string;
    "$success-background-glow-high-contrast":     string;
    "$success-dark":                              string;
    "$success-hover":                             string;
    "$success-active":                            string;
    "$success-invert":                            string;
    "$success-box-shadow":                        string;
    $info:                                        string;
    "$info-background":                           string;
    "$info-background-glow-high-contrast":        string;
    "$info-dark":                                 string;
    "$info-hover":                                string;
    "$info-active":                               string;
    "$info-invert":                               string;
    "$info-box-shadow":                           string;
    $warning:                                     string;
    "$warning-background":                        string;
    "$warning-background-glow-high-contrast":     string;
    "$warning-dark":                              string;
    "$warning-hover":                             string;
    "$warning-active":                            string;
    "$warning-invert":                            string;
    "$warning-box-shadow":                        string;
    $danger:                                      string;
    "$danger-background":                         string;
    "$danger-background-glow-high-contrast":      string;
    "$danger-dark":                               string;
    "$danger-hover":                              string;
    "$danger-active":                             string;
    "$danger-invert":                             string;
    "$danger-box-shadow":                         string;
    $colors:                                      ColorsClass;
    "$color-index-base":                          string;
    "$color-index-background":                    string;
    "$color-index-dark":                          string;
    "$color-index-hover":                         string;
    "$color-index-active":                        string;
    "$color-index-invert":                        string;
    "$color-index-box-shadow":                    string;
    "$color-index-background-glow-high-contrast": string;
}

export interface ColorsClass {
    primary:   string;
    secondary: string;
    tertiary:  string;
    success:   string;
    info:      string;
    warning:   string;
    danger:    string;
}

export interface Direction {
    name:     string;
    location: string;
    tokens:   DirectionTokens;
}

export interface DirectionTokens {
    "$user-text-direction":        string;
    "$user-left":                  string;
    "$user-right":                 string;
    "$user-translate-x-direction": string;
    $directions:                   Directions;
}

export interface Directions {
    top:    string;
    right:  string;
    bottom: string;
    left:   string;
}

export interface Display {
    name:     string;
    location: string;
    tokens:   DisplayTokens;
}

export interface DisplayTokens {
    $displays: string;
}

export interface Focus {
    name:     string;
    location: string;
    tokens:   FocusTokens;
}

export interface FocusTokens {
    "$focus-width":                string;
    "$focus-style":                string;
    "$focus-outline-offset":       string;
    "$focus-visible-use-polyfill": boolean;
}

export interface FontStack {
    name:     string;
    location: string;
    tokens:   FontStackTokens;
}

export interface FontStackTokens {
    "$monospace-font-stack": string;
    "$normal-font-stack":    string;
    "$quote-font-stack":     string;
}

export interface Layout {
    name:     string;
    location: string;
    tokens:   LayoutTokens;
}

export interface LayoutTokens {
    "$column-gap":        string;
    "$large-column-gap":  string;
    "$reading-max-width": string;
}

export interface Palette {
    name:     string;
    location: string;
    tokens:   { [key: string]: string };
}

export interface Position {
    name:     string;
    location: string;
    tokens:   PositionTokens;
}

export interface PositionTokens {
    $positions: string;
}

export interface Schemes {
    name:     string;
    location: string;
    tokens:   SchemesTokens;
}

export interface SchemesTokens {
    "$color-schemes": ColorSchemes;
}

export interface ColorSchemes {
    light:           string;
    dark:            string;
    "high-contrast": string;
}

export interface Shadow {
    name:     string;
    location: string;
    tokens:   ShadowTokens;
}

export interface ShadowTokens {
    "$box-shadow-light":       string;
    "$box-shadow-medium":      string;
    "$box-shadow-heavy":       string;
    "$box-shadow-extra-heavy": string;
}

export interface Spacing {
    name:     string;
    location: string;
    tokens:   SpacingTokens;
}

export interface SpacingTokens {
    "$layout-0":  string;
    "$layout-1":  string;
    "$layout-2":  string;
    "$layout-3":  string;
    "$layout-4":  string;
    "$layout-5":  string;
    "$layout-6":  string;
    "$layout-7":  string;
    "$layout-8":  string;
    "$spacer-0":  string;
    "$spacer-1":  string;
    "$spacer-2":  string;
    "$spacer-3":  string;
    "$spacer-4":  string;
    "$spacer-5":  string;
    "$spacer-6":  string;
    "$spacer-7":  string;
    "$spacer-8":  string;
    "$spacer-9":  string;
    "$spacer-10": string;
}

export interface Themes {
    name:     string;
    location: string;
    tokens:   ThemesTokens;
}

export interface ThemesTokens {
    $themes: ThemesClass;
}

export interface ThemesClass {
    light:           { [key: string]: string };
    dark:            { [key: string]: string };
    "high-contrast": { [key: string]: string };
}

export interface Typography {
    name:     string;
    location: string;
    tokens:   TypographyTokens;
}

export interface TypographyTokens {
    "$document-font-size":    string;
    "$font-size-9":           string;
    "$font-size-8":           string;
    "$font-size-7":           string;
    "$font-size-6":           string;
    "$font-size-5":           string;
    "$font-size-4":           string;
    "$font-size-3":           string;
    "$font-size-2":           string;
    "$font-size-1":           string;
    "$font-size-0":           string;
    "$weight-light":          string;
    "$weight-semilight":      string;
    "$weight-normal":         string;
    "$weight-semibold":       string;
    "$weight-bold":           string;
    "$letter-spacing-medium": string;
    "$letter-spacing-wide":   string;
}

export interface ZIndex {
    name:     string;
    location: string;
    tokens:   ZIndexTokens;
}

export interface ZIndexTokens {
    "$zindex-active":         string;
    "$zindex-hover":          string;
    "$zindex-focus":          string;
    "$zindex-multi":          string;
    "$zindex-dropdown":       string;
    "$zindex-sticky":         string;
    "$zindex-fixed":          string;
    "$zindex-modal-backdrop": string;
    "$zindex-modal":          string;
    "$zindex-popover":        string;
    "$zindex-tooltip":        string;
    "$zindex-stretched-link": string;
}

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
export class Convert {
    public static toAtlasTokens(json: string): AtlasTokens {
        return cast(JSON.parse(json), r("AtlasTokens"));
    }

    public static atlasTokensToJson(value: AtlasTokens): string {
        return JSON.stringify(uncast(value, r("AtlasTokens")), null, 2);
    }
}

function invalidValue(typ: any, val: any, key: any = ''): never {
    if (key) {
        throw Error(`Invalid value for key "${key}". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);
    }
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );
}

function jsonToJSProps(typ: any): any {
    if (typ.jsonToJS === undefined) {
        const map: any = {};
        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
    if (typ.jsToJSON === undefined) {
        const map: any = {};
        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val: any, typ: any, getProps: any, key: any = ''): any {
    function transformPrimitive(typ: string, val: any): any {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val, key);
    }

    function transformUnion(typs: any[], val: any): any {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases: string[], val: any): any {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ: any, val: any): any {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformDate(val: any): any {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue("Date", val);
        }
        return d;
    }

    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        const result: any = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, prop.key);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number") return transformDate(val);
    return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
    return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
    return transform(val, typ, jsToJSONProps);
}

function a(typ: any) {
    return { arrayItems: typ };
}

function u(...typs: any[]) {
    return { unionMembers: typs };
}

function o(props: any[], additional: any) {
    return { props, additional };
}

function m(additional: any) {
    return { props: [], additional };
}

function r(name: string) {
    return { ref: name };
}

const typeMap: any = {
    "AtlasTokens": o([
        { json: "animation", js: "animation", typ: r("Animation") },
        { json: "border", js: "border", typ: r("Border") },
        { json: "breakpoints", js: "breakpoints", typ: r("Breakpoints") },
        { json: "colors", js: "colors", typ: r("Colors") },
        { json: "direction", js: "direction", typ: r("Direction") },
        { json: "display", js: "display", typ: r("Display") },
        { json: "focus", js: "focus", typ: r("Focus") },
        { json: "font-stack", js: "font-stack", typ: r("FontStack") },
        { json: "layout", js: "layout", typ: r("Layout") },
        { json: "palette", js: "palette", typ: r("Palette") },
        { json: "position", js: "position", typ: r("Position") },
        { json: "schemes", js: "schemes", typ: r("Schemes") },
        { json: "shadow", js: "shadow", typ: r("Shadow") },
        { json: "spacing", js: "spacing", typ: r("Spacing") },
        { json: "themes", js: "themes", typ: r("Themes") },
        { json: "typography", js: "typography", typ: r("Typography") },
        { json: "z-index", js: "z-index", typ: r("ZIndex") },
    ], false),
    "Animation": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("AnimationTokens") },
    ], false),
    "AnimationTokens": o([
        { json: "$input-timing-function", js: "$input-timing-function", typ: "" },
        { json: "$input-transition-duration", js: "$input-transition-duration", typ: "" },
        { json: "$nav-bar-transition-duration", js: "$nav-bar-transition-duration", typ: "" },
    ], false),
    "Border": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("BorderTokens") },
    ], false),
    "BorderTokens": o([
        { json: "$border-width", js: "$border-width", typ: "" },
        { json: "$border-width-md", js: "$border-width-md", typ: "" },
        { json: "$border-width-lg", js: "$border-width-lg", typ: "" },
        { json: "$border-radius-sm", js: "$border-radius-sm", typ: "" },
        { json: "$border-radius", js: "$border-radius", typ: "" },
        { json: "$border-radius-lg", js: "$border-radius-lg", typ: "" },
        { json: "$border-radius-rounded", js: "$border-radius-rounded", typ: "" },
    ], false),
    "Breakpoints": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("BreakpointsTokens") },
    ], false),
    "BreakpointsTokens": o([
        { json: "$container-gap", js: "$container-gap", typ: "" },
        { json: "$breakpoint-tablet", js: "$breakpoint-tablet", typ: "" },
        { json: "$breakpoint-desktop", js: "$breakpoint-desktop", typ: "" },
        { json: "$breakpoint-widescreen", js: "$breakpoint-widescreen", typ: "" },
    ], false),
    "Colors": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("ColorsTokens") },
    ], false),
    "ColorsTokens": o([
        { json: "$white-static", js: "$white-static", typ: "" },
        { json: "$black-static", js: "$black-static", typ: "" },
        { json: "$text", js: "$text", typ: "" },
        { json: "$text-subtle", js: "$text-subtle", typ: "" },
        { json: "$text-invert", js: "$text-invert", typ: "" },
        { json: "$hyperlink", js: "$hyperlink", typ: "" },
        { json: "$text-glow-high-contrast", js: "$text-glow-high-contrast", typ: "" },
        { json: "$box-shadow-color-light", js: "$box-shadow-color-light", typ: "" },
        { json: "$box-shadow-color-medium", js: "$box-shadow-color-medium", typ: "" },
        { json: "$box-shadow-color-heavy", js: "$box-shadow-color-heavy", typ: "" },
        { json: "$box-shadow-color-extra-heavy", js: "$box-shadow-color-extra-heavy", typ: "" },
        { json: "$body-background", js: "$body-background", typ: "" },
        { json: "$body-background-medium", js: "$body-background-medium", typ: "" },
        { json: "$alternate-background", js: "$alternate-background", typ: "" },
        { json: "$alternate-background-medium", js: "$alternate-background-medium", typ: "" },
        { json: "$overlay", js: "$overlay", typ: "" },
        { json: "$overlay-invert", js: "$overlay-invert", typ: "" },
        { json: "$overlay-static", js: "$overlay-static", typ: "" },
        { json: "$border", js: "$border", typ: "" },
        { json: "$code-header", js: "$code-header", typ: "" },
        { json: "$code-block", js: "$code-block", typ: "" },
        { json: "$inline-code", js: "$inline-code", typ: "" },
        { json: "$control-border", js: "$control-border", typ: "" },
        { json: "$table-header", js: "$table-header", typ: "" },
        { json: "$table-row", js: "$table-row", typ: "" },
        { json: "$table-row-header", js: "$table-row-header", typ: "" },
        { json: "$table-border-dark", js: "$table-border-dark", typ: "" },
        { json: "$facepile-red", js: "$facepile-red", typ: "" },
        { json: "$facepile-teal", js: "$facepile-teal", typ: "" },
        { json: "$facepile-blue", js: "$facepile-blue", typ: "" },
        { json: "$default-hover", js: "$default-hover", typ: "" },
        { json: "$default-hover-invert", js: "$default-hover-invert", typ: "" },
        { json: "$border-white-high-contrast", js: "$border-white-high-contrast", typ: "" },
        { json: "$border-yellow-high-contrast", js: "$border-yellow-high-contrast", typ: "" },
        { json: "$code-highlight-background", js: "$code-highlight-background", typ: "" },
        { json: "$visited", js: "$visited", typ: "" },
        { json: "$score-low-off", js: "$score-low-off", typ: "" },
        { json: "$score-low", js: "$score-low", typ: "" },
        { json: "$score-medium-off", js: "$score-medium-off", typ: "" },
        { json: "$score-medium", js: "$score-medium", typ: "" },
        { json: "$score-high-off", js: "$score-high-off", typ: "" },
        { json: "$score-high", js: "$score-high", typ: "" },
        { json: "$primary", js: "$primary", typ: "" },
        { json: "$primary-background", js: "$primary-background", typ: "" },
        { json: "$primary-background-glow-high-contrast", js: "$primary-background-glow-high-contrast", typ: "" },
        { json: "$primary-dark", js: "$primary-dark", typ: "" },
        { json: "$primary-hover", js: "$primary-hover", typ: "" },
        { json: "$primary-active", js: "$primary-active", typ: "" },
        { json: "$primary-invert", js: "$primary-invert", typ: "" },
        { json: "$primary-box-shadow", js: "$primary-box-shadow", typ: "" },
        { json: "$secondary", js: "$secondary", typ: "" },
        { json: "$secondary-background", js: "$secondary-background", typ: "" },
        { json: "$secondary-background-glow-high-contrast", js: "$secondary-background-glow-high-contrast", typ: "" },
        { json: "$secondary-dark", js: "$secondary-dark", typ: "" },
        { json: "$secondary-hover", js: "$secondary-hover", typ: "" },
        { json: "$secondary-active", js: "$secondary-active", typ: "" },
        { json: "$secondary-invert", js: "$secondary-invert", typ: "" },
        { json: "$secondary-box-shadow", js: "$secondary-box-shadow", typ: "" },
        { json: "$tertiary", js: "$tertiary", typ: "" },
        { json: "$tertiary-background", js: "$tertiary-background", typ: "" },
        { json: "$tertiary-background-glow-high-contrast", js: "$tertiary-background-glow-high-contrast", typ: "" },
        { json: "$tertiary-dark", js: "$tertiary-dark", typ: "" },
        { json: "$tertiary-hover", js: "$tertiary-hover", typ: "" },
        { json: "$tertiary-active", js: "$tertiary-active", typ: "" },
        { json: "$tertiary-invert", js: "$tertiary-invert", typ: "" },
        { json: "$tertiary-box-shadow", js: "$tertiary-box-shadow", typ: "" },
        { json: "$success", js: "$success", typ: "" },
        { json: "$success-background", js: "$success-background", typ: "" },
        { json: "$success-background-glow-high-contrast", js: "$success-background-glow-high-contrast", typ: "" },
        { json: "$success-dark", js: "$success-dark", typ: "" },
        { json: "$success-hover", js: "$success-hover", typ: "" },
        { json: "$success-active", js: "$success-active", typ: "" },
        { json: "$success-invert", js: "$success-invert", typ: "" },
        { json: "$success-box-shadow", js: "$success-box-shadow", typ: "" },
        { json: "$info", js: "$info", typ: "" },
        { json: "$info-background", js: "$info-background", typ: "" },
        { json: "$info-background-glow-high-contrast", js: "$info-background-glow-high-contrast", typ: "" },
        { json: "$info-dark", js: "$info-dark", typ: "" },
        { json: "$info-hover", js: "$info-hover", typ: "" },
        { json: "$info-active", js: "$info-active", typ: "" },
        { json: "$info-invert", js: "$info-invert", typ: "" },
        { json: "$info-box-shadow", js: "$info-box-shadow", typ: "" },
        { json: "$warning", js: "$warning", typ: "" },
        { json: "$warning-background", js: "$warning-background", typ: "" },
        { json: "$warning-background-glow-high-contrast", js: "$warning-background-glow-high-contrast", typ: "" },
        { json: "$warning-dark", js: "$warning-dark", typ: "" },
        { json: "$warning-hover", js: "$warning-hover", typ: "" },
        { json: "$warning-active", js: "$warning-active", typ: "" },
        { json: "$warning-invert", js: "$warning-invert", typ: "" },
        { json: "$warning-box-shadow", js: "$warning-box-shadow", typ: "" },
        { json: "$danger", js: "$danger", typ: "" },
        { json: "$danger-background", js: "$danger-background", typ: "" },
        { json: "$danger-background-glow-high-contrast", js: "$danger-background-glow-high-contrast", typ: "" },
        { json: "$danger-dark", js: "$danger-dark", typ: "" },
        { json: "$danger-hover", js: "$danger-hover", typ: "" },
        { json: "$danger-active", js: "$danger-active", typ: "" },
        { json: "$danger-invert", js: "$danger-invert", typ: "" },
        { json: "$danger-box-shadow", js: "$danger-box-shadow", typ: "" },
        { json: "$colors", js: "$colors", typ: r("ColorsClass") },
        { json: "$color-index-base", js: "$color-index-base", typ: "" },
        { json: "$color-index-background", js: "$color-index-background", typ: "" },
        { json: "$color-index-dark", js: "$color-index-dark", typ: "" },
        { json: "$color-index-hover", js: "$color-index-hover", typ: "" },
        { json: "$color-index-active", js: "$color-index-active", typ: "" },
        { json: "$color-index-invert", js: "$color-index-invert", typ: "" },
        { json: "$color-index-box-shadow", js: "$color-index-box-shadow", typ: "" },
        { json: "$color-index-background-glow-high-contrast", js: "$color-index-background-glow-high-contrast", typ: "" },
    ], false),
    "ColorsClass": o([
        { json: "primary", js: "primary", typ: "" },
        { json: "secondary", js: "secondary", typ: "" },
        { json: "tertiary", js: "tertiary", typ: "" },
        { json: "success", js: "success", typ: "" },
        { json: "info", js: "info", typ: "" },
        { json: "warning", js: "warning", typ: "" },
        { json: "danger", js: "danger", typ: "" },
    ], false),
    "Direction": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("DirectionTokens") },
    ], false),
    "DirectionTokens": o([
        { json: "$user-text-direction", js: "$user-text-direction", typ: "" },
        { json: "$user-left", js: "$user-left", typ: "" },
        { json: "$user-right", js: "$user-right", typ: "" },
        { json: "$user-translate-x-direction", js: "$user-translate-x-direction", typ: "" },
        { json: "$directions", js: "$directions", typ: r("Directions") },
    ], false),
    "Directions": o([
        { json: "top", js: "top", typ: "" },
        { json: "right", js: "right", typ: "" },
        { json: "bottom", js: "bottom", typ: "" },
        { json: "left", js: "left", typ: "" },
    ], false),
    "Display": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("DisplayTokens") },
    ], false),
    "DisplayTokens": o([
        { json: "$displays", js: "$displays", typ: "" },
    ], false),
    "Focus": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("FocusTokens") },
    ], false),
    "FocusTokens": o([
        { json: "$focus-width", js: "$focus-width", typ: "" },
        { json: "$focus-style", js: "$focus-style", typ: "" },
        { json: "$focus-outline-offset", js: "$focus-outline-offset", typ: "" },
        { json: "$focus-visible-use-polyfill", js: "$focus-visible-use-polyfill", typ: true },
    ], false),
    "FontStack": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("FontStackTokens") },
    ], false),
    "FontStackTokens": o([
        { json: "$monospace-font-stack", js: "$monospace-font-stack", typ: "" },
        { json: "$normal-font-stack", js: "$normal-font-stack", typ: "" },
        { json: "$quote-font-stack", js: "$quote-font-stack", typ: "" },
    ], false),
    "Layout": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("LayoutTokens") },
    ], false),
    "LayoutTokens": o([
        { json: "$column-gap", js: "$column-gap", typ: "" },
        { json: "$large-column-gap", js: "$large-column-gap", typ: "" },
        { json: "$reading-max-width", js: "$reading-max-width", typ: "" },
    ], false),
    "Palette": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: m("") },
    ], false),
    "Position": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("PositionTokens") },
    ], false),
    "PositionTokens": o([
        { json: "$positions", js: "$positions", typ: "" },
    ], false),
    "Schemes": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("SchemesTokens") },
    ], false),
    "SchemesTokens": o([
        { json: "$color-schemes", js: "$color-schemes", typ: r("ColorSchemes") },
    ], false),
    "ColorSchemes": o([
        { json: "light", js: "light", typ: "" },
        { json: "dark", js: "dark", typ: "" },
        { json: "high-contrast", js: "high-contrast", typ: "" },
    ], false),
    "Shadow": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("ShadowTokens") },
    ], false),
    "ShadowTokens": o([
        { json: "$box-shadow-light", js: "$box-shadow-light", typ: "" },
        { json: "$box-shadow-medium", js: "$box-shadow-medium", typ: "" },
        { json: "$box-shadow-heavy", js: "$box-shadow-heavy", typ: "" },
        { json: "$box-shadow-extra-heavy", js: "$box-shadow-extra-heavy", typ: "" },
    ], false),
    "Spacing": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("SpacingTokens") },
    ], false),
    "SpacingTokens": o([
        { json: "$layout-0", js: "$layout-0", typ: "" },
        { json: "$layout-1", js: "$layout-1", typ: "" },
        { json: "$layout-2", js: "$layout-2", typ: "" },
        { json: "$layout-3", js: "$layout-3", typ: "" },
        { json: "$layout-4", js: "$layout-4", typ: "" },
        { json: "$layout-5", js: "$layout-5", typ: "" },
        { json: "$layout-6", js: "$layout-6", typ: "" },
        { json: "$layout-7", js: "$layout-7", typ: "" },
        { json: "$layout-8", js: "$layout-8", typ: "" },
        { json: "$spacer-0", js: "$spacer-0", typ: "" },
        { json: "$spacer-1", js: "$spacer-1", typ: "" },
        { json: "$spacer-2", js: "$spacer-2", typ: "" },
        { json: "$spacer-3", js: "$spacer-3", typ: "" },
        { json: "$spacer-4", js: "$spacer-4", typ: "" },
        { json: "$spacer-5", js: "$spacer-5", typ: "" },
        { json: "$spacer-6", js: "$spacer-6", typ: "" },
        { json: "$spacer-7", js: "$spacer-7", typ: "" },
        { json: "$spacer-8", js: "$spacer-8", typ: "" },
        { json: "$spacer-9", js: "$spacer-9", typ: "" },
        { json: "$spacer-10", js: "$spacer-10", typ: "" },
    ], false),
    "Themes": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("ThemesTokens") },
    ], false),
    "ThemesTokens": o([
        { json: "$themes", js: "$themes", typ: r("ThemesClass") },
    ], false),
    "ThemesClass": o([
        { json: "light", js: "light", typ: m("") },
        { json: "dark", js: "dark", typ: m("") },
        { json: "high-contrast", js: "high-contrast", typ: m("") },
    ], false),
    "Typography": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("TypographyTokens") },
    ], false),
    "TypographyTokens": o([
        { json: "$document-font-size", js: "$document-font-size", typ: "" },
        { json: "$font-size-9", js: "$font-size-9", typ: "" },
        { json: "$font-size-8", js: "$font-size-8", typ: "" },
        { json: "$font-size-7", js: "$font-size-7", typ: "" },
        { json: "$font-size-6", js: "$font-size-6", typ: "" },
        { json: "$font-size-5", js: "$font-size-5", typ: "" },
        { json: "$font-size-4", js: "$font-size-4", typ: "" },
        { json: "$font-size-3", js: "$font-size-3", typ: "" },
        { json: "$font-size-2", js: "$font-size-2", typ: "" },
        { json: "$font-size-1", js: "$font-size-1", typ: "" },
        { json: "$font-size-0", js: "$font-size-0", typ: "" },
        { json: "$weight-light", js: "$weight-light", typ: "" },
        { json: "$weight-semilight", js: "$weight-semilight", typ: "" },
        { json: "$weight-normal", js: "$weight-normal", typ: "" },
        { json: "$weight-semibold", js: "$weight-semibold", typ: "" },
        { json: "$weight-bold", js: "$weight-bold", typ: "" },
        { json: "$letter-spacing-medium", js: "$letter-spacing-medium", typ: "" },
        { json: "$letter-spacing-wide", js: "$letter-spacing-wide", typ: "" },
    ], false),
    "ZIndex": o([
        { json: "name", js: "name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "tokens", js: "tokens", typ: r("ZIndexTokens") },
    ], false),
    "ZIndexTokens": o([
        { json: "$zindex-active", js: "$zindex-active", typ: "" },
        { json: "$zindex-hover", js: "$zindex-hover", typ: "" },
        { json: "$zindex-focus", js: "$zindex-focus", typ: "" },
        { json: "$zindex-multi", js: "$zindex-multi", typ: "" },
        { json: "$zindex-dropdown", js: "$zindex-dropdown", typ: "" },
        { json: "$zindex-sticky", js: "$zindex-sticky", typ: "" },
        { json: "$zindex-fixed", js: "$zindex-fixed", typ: "" },
        { json: "$zindex-modal-backdrop", js: "$zindex-modal-backdrop", typ: "" },
        { json: "$zindex-modal", js: "$zindex-modal", typ: "" },
        { json: "$zindex-popover", js: "$zindex-popover", typ: "" },
        { json: "$zindex-tooltip", js: "$zindex-tooltip", typ: "" },
        { json: "$zindex-stretched-link", js: "$zindex-stretched-link", typ: "" },
    ], false),
};
